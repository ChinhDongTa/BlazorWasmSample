@page "/weather"
@using GenericHttpClientBase
@* @inject IGenericApiService<WeatherForecast> WeatherForecastService *@
@inject IHttpClientFactory factory
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>@mes</p>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    
}

@code {
    private List<WeatherForecast>? forecasts;
    string? mes;
    protected override async Task OnInitializedAsync()
    {
        //forecasts = await WeatherForecastService.GetAllAsync("weatherforecast");
        var client = factory.CreateClient("Auth");
        forecasts = await client.GetFromJsonAsync<List<WeatherForecast>>("weatherforecast", new System.Text.Json.JsonSerializerOptions{ PropertyNameCaseInsensitive=true});
        mes = $"Total forecasts: {forecasts?.Count()}";
        //StateHasChanged();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
